[{"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\index.js":"1","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\App.js":"2","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\NavBar\\index.js":"3","C:\\Users\\JaeShin\\Code\\personal\\ummas-cb\\ummacb\\src\\index.js":"4","C:\\Users\\JaeShin\\Code\\personal\\ummas-cb\\ummacb\\src\\App.js":"5","C:\\Users\\JaeShin\\Code\\personal\\ummas-cb\\ummacb\\src\\components\\NavBar\\index.js":"6","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\utils\\API.js":"7","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\SignInPage\\index.js":"8","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\RecipePage\\index.js":"9","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\SignInForm\\index.js":"10","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\RecipeForm\\index.js":"11","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\IngrePage\\index.js":"12","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\IngreForm\\index.js":"13","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\RecipeCardPage\\index.js":"14","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\RecipeCard\\index.js":"15","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\HomePage\\index.js":"16","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\RecipeViewCard\\index.js":"17","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\SignUpPage\\index.js":"18","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\SignUpForm\\index.js":"19","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\ProfilePage\\index.js":"20","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\UpdateRecipePage\\index.js":"21","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\UpdateRecipeForm\\index.js":"22","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\UserProfile\\index.js":"23","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\UserProfilePage\\index.js":"24","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\CategoryPage\\index.js":"25","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\EditProfilePage\\index.js":"26","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\NoPage\\index.js":"27","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\NoPageCard\\index.js":"28","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\OtherUsersProfile\\index.js":"29","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\EditProfileForm\\index.js":"30","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\LogInModal\\index.js":"31","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\AddMoreIngrePage\\index.js":"32","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\AddIngreForm\\index.js":"33"},{"size":157,"mtime":1612306958667,"results":"34","hashOfConfig":"35"},{"size":4314,"mtime":1612927939024,"results":"36","hashOfConfig":"35"},{"size":2973,"mtime":1612919934230,"results":"37","hashOfConfig":"35"},{"size":157,"mtime":1611363126334,"results":"38","hashOfConfig":"39"},{"size":1897,"mtime":1611368849741,"results":"40","hashOfConfig":"39"},{"size":1753,"mtime":1611366125459,"results":"41","hashOfConfig":"39"},{"size":14272,"mtime":1612934372744,"results":"42","hashOfConfig":"35"},{"size":2196,"mtime":1612898192058,"results":"43","hashOfConfig":"35"},{"size":2866,"mtime":1612487658950,"results":"44","hashOfConfig":"35"},{"size":1955,"mtime":1612919934241,"results":"45","hashOfConfig":"35"},{"size":4649,"mtime":1612919934238,"results":"46","hashOfConfig":"35"},{"size":3173,"mtime":1611797435625,"results":"47","hashOfConfig":"35"},{"size":4444,"mtime":1612919934225,"results":"48","hashOfConfig":"35"},{"size":4510,"mtime":1612927980353,"results":"49","hashOfConfig":"35"},{"size":5394,"mtime":1612927939026,"results":"50","hashOfConfig":"35"},{"size":2938,"mtime":1612919934252,"results":"51","hashOfConfig":"35"},{"size":887,"mtime":1612919934239,"results":"52","hashOfConfig":"35"},{"size":1944,"mtime":1612898192059,"results":"53","hashOfConfig":"35"},{"size":2674,"mtime":1612919934243,"results":"54","hashOfConfig":"35"},{"size":2740,"mtime":1612898192056,"results":"55","hashOfConfig":"35"},{"size":6863,"mtime":1612919934256,"results":"56","hashOfConfig":"35"},{"size":8941,"mtime":1612919934245,"results":"57","hashOfConfig":"35"},{"size":8840,"mtime":1612919934247,"results":"58","hashOfConfig":"35"},{"size":1023,"mtime":1612898192062,"results":"59","hashOfConfig":"35"},{"size":3190,"mtime":1612919934250,"results":"60","hashOfConfig":"35"},{"size":4036,"mtime":1612898192052,"results":"61","hashOfConfig":"35"},{"size":399,"mtime":1612898192054,"results":"62","hashOfConfig":"35"},{"size":990,"mtime":1612919934233,"results":"63","hashOfConfig":"35"},{"size":4154,"mtime":1612919934235,"results":"64","hashOfConfig":"35"},{"size":5222,"mtime":1612919934223,"results":"65","hashOfConfig":"35"},{"size":2086,"mtime":1612919934227,"results":"66","hashOfConfig":"35"},{"size":2681,"mtime":1612919934249,"results":"67","hashOfConfig":"35"},{"size":3863,"mtime":1612919934222,"results":"68","hashOfConfig":"35"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"a9h0ta",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1etbsd9",{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"71"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"71"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"71"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"71"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"71"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"71"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"71"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"71"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\index.js",[],["144","145"],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\App.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\NavBar\\index.js",[],"C:\\Users\\JaeShin\\Code\\personal\\ummas-cb\\ummacb\\src\\index.js",[],"C:\\Users\\JaeShin\\Code\\personal\\ummas-cb\\ummacb\\src\\App.js",[],"C:\\Users\\JaeShin\\Code\\personal\\ummas-cb\\ummacb\\src\\components\\NavBar\\index.js",["146","147","148"],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\utils\\API.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\SignInPage\\index.js",["149","150"],"import React, { useState, useEffect } from 'react'\nimport API from '../../utils/API'\nimport SignInForm from '../../components/SignInForm'\n\nexport default function SignInPage() {\n    const [loginFormState, setLoginFormState] = useState({\n        email: \"\",\n        password: \"\"\n    })\n\n    const [profileState, setProfileState] = useState({\n        name: \"\",\n        accountName:\"\",\n        email: \"\",\n        recipes: [],\n        token: \"\",\n        id: \"\",\n        isLoggedIn: false\n    })\n\n    const handleInputChange = event => {\n        const { name, value } = event.target\n        setLoginFormState({\n            ...loginFormState,\n            [name]: value\n        })\n    }\n\n    const handleFormSubmit = event => {\n        event.preventDefault()\n        if (!loginFormState.email || !loginFormState.password) {\n            alert(\"잘못된 비밀번호 / 이메일을 다시 시도하십시오.\")\n        } else {\n            API.login(loginFormState).then(newToken => {\n                if (newToken === null) {\n                    alert(\"잘못된 비밀번호 / 이메일을 다시 시도하십시오.\")\n                } else {\n                    localStorage.setItem(\"token\", newToken.token)\n                    API.getProfile(newToken.token).then(profileData => {\n                        setProfileState({\n                            name: profileData.name,\n                            accountName: profileData.accountName,\n                            email: profileData.email,\n                            id: profileData.id,\n                            isLoggedIn: true\n                        })\n                    }).then(res => {\n                        window.location.href = \"/\"\n                    })\n                }\n            })\n        }\n    }\n\n    return (\n        <div>\n            <SignInForm \n                handleInputChange={handleInputChange}\n                handleFormSubmit={handleFormSubmit}\n                name={loginFormState.name}\n                email={loginFormState.email}\n            />\n        </div>\n    )\n}\n","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\RecipePage\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\SignInForm\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\RecipeForm\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\IngrePage\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\IngreForm\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\RecipeCardPage\\index.js",["151","152"],"import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport API from '../../utils/API'\nimport RecipeCard from '../../components/RecipeCard'\n\nexport default function RecipeCardPage(props) {\n    const [recipeState, setRecipeState] = useState({\n        recipeName: \"\",\n        recipeDescript: \"\",\n        recipeImage: \"\",\n        recipeId: \"\",\n        ownerId: \"\",\n        numberOfLikes: 0\n    });\n    const [ingredientState, setIngredientState] = useState({\n        item: []\n    });\n    const [directionState, setDirectionState] = useState({\n        directions: \"\",\n    });\n    const [savedRecipeState, setSavedRecipeState] = useState({\n        accountName: \"\",\n        id: \"\",\n    })\n    const [ownerProfileState, setOwnerProfileState] = useState({\n        owner: \"\"\n    })\n   \n    const { recipeName } = useParams();\n    const { id } = useParams();\n\n    useEffect(() => {\n        fetchData()\n        fetchIngreData()\n        fetchSavedRecipes()\n    }, [])\n\n    function fetchData() {\n        API.getOneRecipe(id).then(data => {\n            if (data !== null || data !== undefined) {\n                setRecipeState({\n                    recipeName: data.recipeName,\n                    recipeDescript: data.recipeDescript,\n                    recipeImage: data.recipeImage,\n                    recipeId: recipeName,\n                    ownerId: data.UserId,\n                    numberOfLikes: data.numberOfLikes\n                })\n                setDirectionState({\n                    directions: data.Steps[0].directions\n                })\n                API.getOneUser(data.UserId).then(data => {\n                    setOwnerProfileState({\n                        owner: data.accountName\n                    })\n                })\n            }\n        })\n    }\n\n    function fetchIngreData() {\n        API.getAllIngreForRecipe(id).then(data => {\n            if (data !== null && data !== undefined) {\n                setIngredientState({\n                    item: data\n                })\n            }\n        })\n    }\n\n    async function fetchSavedRecipes() {\n        const token = localStorage.getItem('token')\n        if (token !== null && token !== undefined && token !== \"\") {\n            const profile = await API.getProfile(token)\n            let account = profile.accountName\n            let savedData = await API.getAllSavedRecipeByRecipeId(id)\n            // console.log(savedData)\n            let user = await savedData.find(obj => obj.savedByUser === account)\n            // console.log(user)\n            if (user != undefined && user.savedByUser === account) {\n                setSavedRecipeState({\n                    accountName: user.savedByUser,\n                    id: user.UserId,\n                })\n            } else {\n                console.log(\"else\")\n                setSavedRecipeState({\n                    accountName: \"\",\n                    id: \"\",\n                })\n            }\n        }\n\n\n    }\n\n    function numOfLikes() {\n        const newLikes = recipeState.numberOfLikes + 1\n        API.updateNumOfLikes(id, newLikes)\n    }\n\n    const handleSaveRecipeBtn = event => {\n        event.preventDefault()\n        numOfLikes()\n        API.saveRecipe(props.profile.token, {\n            recipeName: recipeState.recipeName,\n            ownerId: recipeState.ownerId,\n            savedByUser: props.profile.accountName,\n            recipeId: id,\n            isSaved: true\n        }).then(afterSave => {\n            window.location.reload()\n        })\n    }\n\n    return (\n        <div>\n            <RecipeCard\n                handleSaveRecipeBtn={handleSaveRecipeBtn}\n                //Recipe\n                recipeName={recipeState.recipeName}\n                recipeDescript={recipeState.recipeDescript}\n                recipeImage={recipeState.recipeImage}\n                ownerId={recipeState.ownerId}\n                recipeId={id}\n                numberOflikes={recipeState.numberOfLikes}\n                // Ingredients\n                ingredients={ingredientState.item}\n                // Directions\n                directions={directionState.directions}\n                // User Info\n                userId={props.profile.id}\n                isLoggedIn={props.profile.isLoggedIn}\n                accountName={props.profile.accountName}\n                isSaved={savedRecipeState.isSaved}\n                owner={ownerProfileState.owner}\n                savedByUser={savedRecipeState.accountName}\n            />\n        </div>\n    )\n}\n","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\RecipeCard\\index.js",["153"],"import { Card } from 'react-bootstrap'\nimport { ListGroup } from 'react-bootstrap'\nimport { Accordion } from 'react-bootstrap'\nimport { Button } from 'react-bootstrap'\nimport { Row } from 'react-bootstrap'\nimport { Badge } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHeart } from '@fortawesome/free-solid-svg-icons'\nimport './styles.css'\n\nexport default function RecipeCard(props) {\n    return (\n        <Accordion defaultActiveKey=\"0\">\n            <Card className=\"RecipeCard\" style={{ marginTop: \"25px\" }}>\n                <Card.Header className=\"ingreCardHeader\"><strong>{props.recipeName}</strong></Card.Header>\n                <Card.Img\n                    variant=\"top\"\n                    src={props.recipeImage}\n                    className=\"RecipeCardImage\"\n                />\n                <Accordion.Toggle as={Card.Header} eventKey=\"0\" className=\"ingreAccordion\">\n                    <strong>Description</strong>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey=\"0\">\n                    <Card.Body className=\"ingreGroupBody\">\n                        <strong>{props.recipeDescript}</strong>\n                    </Card.Body>\n                </Accordion.Collapse>\n                <Accordion.Toggle as={Card.Header} eventKey=\"1\" className=\"ingreAccordion\">\n                    <strong>Ingredients</strong>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey=\"1\">\n                    <Card.Body className=\"ingreGroupBody\">\n                        <ListGroup className=\"list-group-flush\">\n                            <Row lg={3} md={2} sm={2} xs={1} className=\"no-gutters\">\n                                {props.ingredients !== null ?\n                                    props.ingredients.map(item => (\n                                        <ListGroup variant=\"flush\">\n                                            <ListGroup.Item className=\"ingreGroupList\">\n                                                <strong>{item.ingredientQuant} {item.ingredientUnit} {item.ingredient}</strong>\n                                            </ListGroup.Item>\n                                        </ListGroup>\n                                    ))\n                                    : null}\n                            </Row>\n                        </ListGroup>\n                    </Card.Body>\n                </Accordion.Collapse>\n                <Accordion.Toggle as={Card.Header} eventKey=\"2\" className=\"ingreAccordion\">\n                    <strong>Directions</strong>\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey=\"2\">\n                    <Card.Body className=\"ingreGroupBody\">\n                        <strong>{props.directions}</strong>\n                    </Card.Body>\n                </Accordion.Collapse>\n                <Card.Footer className=\"ingreCardFooter\">\n                    <h5>\n                        <FontAwesomeIcon icon={faHeart}/>\n                        <Badge className=\"likeBadge\">Likes: {props.numberOflikes}</Badge>\n                    </h5>\n                    {props.userId === props.ownerId ?\n                        <Button\n                            variant=\"link\"\n                            className=\"recipeCardViewBtn\"\n                            href={`/updaterecipe/${props.recipeId}`}\n                        >\n                            Update Recipe\n                        </Button>\n                        :\n                        null\n                    }\n\n                    {props.userId !== props.ownerId && props.isLoggedIn && props.savedOwnerId !== props.userId && props.isSaved ?\n                        < Button\n                            variant=\"link\"\n                            className=\"recipeCardViewBtn\"\n                            onClick={props.handleSaveRecipeBtn}\n                        >\n                            Save Recipe\n                        </Button>\n                        :\n                        null\n                    }\n\n                    {props.isLoggedIn && props.userId === props.ownerId ?\n                        <Button\n                            variant=\"link\"\n                            className=\"recipeCardViewBtn\"\n                            href={`/profile/${props.accountName}`}\n                        >\n                            View my Profile\n                       </Button>\n                        :\n                        (props.isLoggedIn ?\n                            <Button\n                                variant=\"link\"\n                                className=\"recipeCardViewBtn\"\n                                href={`/profile/${props.owner}`}\n                            >\n                                Recipe Owner\n                            </Button>\n                            :\n                            null\n                        )\n                    }\n                    {props.isLoggedIn ?\n                        null\n                        :\n                        <Button\n                            variant=\"link\"\n                            className=\"recipeCardViewBtn\"\n                            href=\"/signin\"\n                        >\n                            Sign In\n                        </Button>}\n                </Card.Footer>\n            </Card>\n        </Accordion >\n    )\n}","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\HomePage\\index.js",["154","155"],"import React, { useState, useEffect } from 'react'\nimport API from '../../utils/API'\nimport RecipeViewCard from '../../components/RecipeViewCard'\nimport NoPageCard from '../../components/NoPageCard'\nimport { Container } from 'react-bootstrap'\nimport { Row } from 'react-bootstrap'\nimport { InputGroup } from 'react-bootstrap'\nimport { FormControl } from 'react-bootstrap'\n\n\n\nexport default function HomePage() {\n    const [recipeInfoState, setRecipeInfoState] = useState({\n        recipes: []\n    })\n\n    const [searchState, setSearchState] = useState({\n        search: \"\"\n    })\n\n    useEffect(() => {\n        fetchRecipeInfo()\n    }, [])\n\n    function fetchRecipeInfo() {\n        API.getRecipes().then(data => {\n            setRecipeInfoState({\n                recipes: data\n            })\n        })\n    }\n\n    const handleSearchInput = event => {\n        event.preventDefault()\n        let keyword = event.target.value\n        let filtered = recipeInfoState.recipes.filter(recipeObj => {\n            return (\n                recipeObj.recipeName.toLowerCase().indexOf(keyword) > -1\n            )\n        })\n        if (keyword === \"\") {\n            fetchRecipeInfo()\n        }\n        setRecipeInfoState({\n            recipes: filtered\n        })\n        setSearchState({\n            ...searchState,\n            search: keyword\n        })\n    }\n\n    return (\n        <Container>\n            <h1>Browse All Recipes!</h1>\n            <InputGroup\n                style={{\n                    width: \"250px\",\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    position: \"sticky\",\n                    top: \"0\",\n                    zIndex: \"1\",\n                }}\n            >\n                <FormControl\n                    type=\"search\"\n                    placeholder=\"Search\"\n                    className=\"form-control\"\n                    onChange={handleSearchInput}\n                    style={{\n                        marginTop: \"10px\",\n                        borderRadius: \"10px\",\n                        // border: \"2px solid slateblue\",\n                        // color: \"midnightblue\"\n                    }}\n                />\n            </InputGroup>\n            <Row>\n                {!recipeInfoState.recipes || recipeInfoState.recipes < 1 ?\n                    <NoPageCard />\n                    :\n                    recipeInfoState.recipes.map(data => (\n                        <div className=\"col-xl-4 col-lg-4 col-md-6 col-sm-12 col-xs-12\">\n                            <RecipeViewCard\n                                key={data.id}\n                                recipeId={data.id}\n                                recipeName={data.recipeName}\n                                recipeImage={data.recipeImage}\n                                recipeDescript={data.recipeDescript}\n                            />\n                        </div>\n                    ))\n                }\n            </Row>\n        </Container>\n    )\n}\n","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\RecipeViewCard\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\SignUpPage\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\SignUpForm\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\ProfilePage\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\UpdateRecipePage\\index.js",["156","157","158","159","160","161"],"import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport API from '../../utils/API'\nimport UpdateRecipeForm from '../../components/UpdateRecipeForm'\n\nexport default function UpdateRecipePage(props) {\n    const [recipeState, setRecipeState] = useState({\n        recipeName: \"\",\n        recipeCategory: \"\",\n        recipeDescript: \"\",\n        recipeImage: \"\"\n    })\n    const [ingredientState, setIngredientState] = useState({\n        data: []\n    })\n    const [directionState, setDirectionState] = useState({\n        directions: \"\"\n    })\n    const [recipeIngreState, setRecipeIngreState] = useState({\n        item: []\n    })\n    const [imgLoadingState, setImgLoadingState] = useState(false)\n\n    const { id } = useParams();\n\n\n    useEffect(() => {\n        fetchRecipeData()\n    }, [])\n\n    function fetchRecipeData() {\n        API.getAllIngreForRecipe(id).then(data => {\n            setRecipeIngreState({\n                item: data\n            })\n        })\n        API.getOneRecipe(id).then(data => {\n            if (data !== null && data !== undefined) {\n                setRecipeState({\n                    recipeName: data.recipeName,\n                    recipeCategory: data.recipeCategory,\n                    recipeDescript: data.recipeDescript,\n                    recipeImage: data.recipeImage,\n                    recipeId: id,\n                    ownerId: data.UserId\n                })\n                setDirectionState({\n                    directions: data.Steps[0].directions,\n                    RecipeId: data.Steps[0].RecipeId,\n                    UserId: data.Steps[0].UserId,\n                })\n            }\n        })\n    }\n\n    const handleRecipeInputChange = event => {\n        const { name, value } = event.target\n        setRecipeState({\n            ...recipeState,\n            [name]: value\n        })\n    }\n\n    const handleSelectCategory = event => {\n        let category = event.target.value\n        setRecipeState({\n            ...recipeState,\n            recipeCategory: category\n        })\n    };\n\n    const handleIngreInputChange = event => {\n        let id = event.target.id\n        const { value } = event.target\n        let data = recipeIngreState.item\n        let index = data.findIndex(obj => obj.id == id)\n        data[index].ingredient = value\n        setIngredientState({ data })\n\n    };\n\n    const handleIngreQuantInputChange = event => {\n        let id = event.target.id\n        const { value } = event.target\n        let data = recipeIngreState.item\n        let index = data.findIndex(obj => obj.id == id)\n        data[index].ingredientQuant = value\n        // console.log({ data })\n        setIngredientState({ data })\n    }\n\n    const handleIngreUnitInputChange = event => {\n        let id = event.target.id\n        const { value } = event.target\n        let data = recipeIngreState.item\n        let index = data.findIndex(obj => obj.id == id)\n        data[index].ingredientUnit = value\n        // console.log({ data })\n        setIngredientState({ data })\n\n    }\n\n    const handleDirectInputChange = event => {\n        const { name, value } = event.target\n        setDirectionState({\n            ...directionState,\n            [name]: value\n        })\n    };\n\n    const handleIngreSetButton = event => {\n        event.preventDefault()\n        let id = event.target.id\n        let index = ingredientState.data.findIndex(obj => obj.id == id)\n        let updateIngre = ingredientState.data[index]\n        API.updateOneIngre(\n            props.profile.token,\n            updateIngre.id,\n            updateIngre.ingredient,\n            updateIngre.ingredientQuant,\n            updateIngre.ingredientUnit\n        )\n    }\n\n    const handleIngreDeleteButton = event => {\n        event.preventDefault()\n        let id = event.target.id\n        let index = recipeIngreState.item.findIndex(obj => obj.id == id)\n        let ingre = recipeIngreState.item[index]\n        const token = localStorage.getItem(\"token\")\n        let confirmAlert = window.confirm(`Are you certain to delete ${ingre.ingredient}?`)\n        let closeBtnId = event.currentTarget.id\n        if (confirmAlert === true) {\n            API.deleteIngredient(token, closeBtnId)\n        }\n    }\n\n    const handleUploadImgBtn = event => {\n        event.preventDefault()\n        document.getElementById('uploadImg').click()\n    };\n\n    const handleUploadImg = async event => {\n        event.preventDefault()\n        const files = event.target.files\n        const data = new FormData()\n        data.append('file', files[0])\n        data.append('upload_preset', 'ummas_cb')\n        setImgLoadingState(true)\n        const res = await API.uploadImage(data)\n        const file = await res.json()\n        setRecipeState({\n            ...recipeState,\n            recipeImage: file.secure_url\n        })\n        setImgLoadingState(false)\n    };\n\n    const handleFormSubmit = event => {\n        event.preventDefault()\n        API.updateRecipe(\n            props.profile.token,\n            id,\n            recipeState.recipeName,\n            recipeState.recipeDescript,\n            recipeState.recipeCategory,\n            recipeState.recipeImage,\n        )\n\n        API.updateDirection(\n            props.profile.token,\n            id,\n            directionState.directions,\n        )\n\n        API.updateSavedRecipe(\n            props.profile.token,\n            id,\n            recipeState.recipeName\n        )\n\n        window.location.href = `/recipe/${id}/${recipeState.recipeName}`\n    }\n\n    return (\n        <div>\n            <UpdateRecipeForm\n                //Recipe\n                recipeId={id}\n                recipeName={recipeState.recipeName}\n                recipeCategory={recipeState.recipeCategory}\n                recipeDescript={recipeState.recipeDescript}\n                recipeImage={recipeState.recipeImage}\n                loading={imgLoadingState}\n                // Ingredients\n                ingredients={recipeIngreState.item}\n                // Directions\n                directions={directionState.directions}\n                // Input Changes\n                handleRecipeInputChange={handleRecipeInputChange}\n                handleSelectCategory={handleSelectCategory}\n                handleIngreInputChange={handleIngreInputChange}\n                handleIngreQuantInputChange={handleIngreQuantInputChange}\n                handleIngreUnitInputChange={handleIngreUnitInputChange}\n                handleDirectInputChange={handleDirectInputChange}\n                // Button clicks\n                handleUploadImgBtn={handleUploadImgBtn}\n                handleUploadImg={handleUploadImg}\n                handleIngreSetButton={handleIngreSetButton}\n                handleIngreDeleteButton={handleIngreDeleteButton}\n                handleFormSubmit={handleFormSubmit}\n            />\n        </div>\n    )\n}\n","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\UpdateRecipeForm\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\UserProfile\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\UserProfilePage\\index.js",["162"],"import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport API from '../../utils/API'\nimport OtherUsersProfile from '../../components/OtherUsersProfile'\n\nexport default function UserProfilePage() {\n    const [userState, setUserState] = useState({\n        name: \"\",\n        accountName: \"\",\n        email: \"\",\n        profileImage: \"\",\n    })\n\n    const { accountName } = useParams();\n\n    useEffect(() => {\n        fetchUserData()\n    }, [])\n\n    function fetchUserData() {\n        API.getOneProfile(accountName).then(data => {\n            setUserState({\n                name: data.name,\n                accountName: data.accountName,\n                email: data.email,\n                profileImage: data.profileImage,\n            })\n        })\n    }\n\n    return (\n        <OtherUsersProfile\n            name={userState.name}\n            accountName={userState.accountName}\n            email={userState.email}\n            profileImage={userState.profileImage}\n        />\n    )\n}\n","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\CategoryPage\\index.js",["163"],"import React, { useState, useEffect } from 'react'\nimport API from '../../utils/API'\nimport RecipeViewCard from '../../components/RecipeViewCard'\nimport NoPageCard from '../../components/NoPageCard'\nimport { useParams } from 'react-router-dom'\nimport { Container } from 'react-bootstrap'\nimport { Row } from 'react-bootstrap'\nimport { InputGroup } from 'react-bootstrap'\nimport { FormControl } from 'react-bootstrap'\nimport './styles.css'\n\nexport default function CategoryPage() {\n    const [recipeInfoState, setRecipeInfoState] = useState({\n        recipes: []\n    })\n\n    const [searchState, setSearchState] = useState({\n        search: \"\"\n    })\n\n    const { category } = useParams();\n\n    useEffect(() => {\n        fetchDinnerRecipeInfo()\n    }, [])\n\n    function fetchDinnerRecipeInfo() {\n        API.getAllCategoryRecipe(category).then(data => {\n            setRecipeInfoState({\n                recipes: data\n            })\n        })\n    }\n\n    const handleSearchInput = event => {\n        event.preventDefault()\n        let keyword = event.target.value\n        let filtered = recipeInfoState.recipes.filter(recipeObj => {\n            return (\n                recipeObj.recipeName.toLowerCase().indexOf(keyword) > -1\n            )\n        })\n        if (keyword === \"\") {\n            fetchDinnerRecipeInfo()\n        }\n        setRecipeInfoState({\n            recipes: filtered\n        })\n        setSearchState({\n            ...searchState,\n            search: keyword\n        })\n    }\n\n    return (\n        <Container>\n            <h1 className=\"categoryName\">Browse {category} Recipes!</h1>\n            <InputGroup\n                style={{\n                    width: \"250px\",\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    position: \"sticky\",\n                    top: \"0\",\n                    zIndex: \"1\",\n                }}\n            >\n                <FormControl\n                    type=\"search\"\n                    placeholder=\"Search\"\n                    className=\"homeSearchBar form-control\"\n                    onChange={handleSearchInput}\n                    style={{\n                        marginTop: \"10px\",\n                        borderRadius: \"10px\",\n                        // border: \"2px solid slateblue\",\n                        // color: \"midnightblue\"\n                    }}\n                />\n            </InputGroup>\n            <Row>\n                {!recipeInfoState.recipes || recipeInfoState.recipes < 1 ?\n                    <NoPageCard />\n                    :\n                    recipeInfoState.recipes.map(data => (\n                        <div className=\"col-xl-4 col-lg-4 col-md-6 col-sm-12 col-xs-12\">\n                            <RecipeViewCard\n                                key={data.id}\n                                recipeId={data.id}\n                                recipeName={data.recipeName}\n                                recipeImage={data.recipeImage}\n                                recipeDescript={data.recipeDescript}\n                            />\n                        </div>\n                    ))\n                }\n            </Row>\n        </Container >\n    )\n}\n","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\EditProfilePage\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\NoPage\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\NoPageCard\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\OtherUsersProfile\\index.js",["164"],"import React, { useState, useEffect } from 'react'\nimport API from '../../utils/API'\nimport { Link } from \"react-router-dom\"\nimport { useParams } from 'react-router-dom'\nimport { Card } from 'react-bootstrap'\nimport { Container } from 'react-bootstrap'\nimport { ListGroup } from 'react-bootstrap'\nimport { InputGroup } from 'react-bootstrap'\nimport { FormControl } from 'react-bootstrap'\nimport { Row } from 'react-bootstrap'\nimport { Col } from 'react-bootstrap'\n\n\nexport default function OtherUsersProfile(props) {\n    const [userRecipesState, setUserRecipesState] = useState({\n        recipe: [],\n    })\n    const [searchState, setSearchState] = useState({\n        search: \"\"\n    })\n\n    const { accountName } = useParams();\n\n    useEffect(() => {\n        fetchRecipeInfo()\n    }, [])\n\n    const handleSearchInput = event => {\n        event.preventDefault()\n        let keyword = event.target.value\n        let filtered = userRecipesState.recipe.filter(recipeObj => {\n            return (\n                recipeObj.recipeName.toLowerCase().indexOf(keyword) > -1\n            )\n        })\n        if (keyword === \"\") {\n            fetchRecipeInfo()\n        }\n        setUserRecipesState({\n            recipe: filtered\n        })\n        setSearchState({\n            ...searchState,\n            search: keyword\n        })\n    }\n\n    function fetchRecipeInfo() {\n        API.getOneProfile(accountName).then(data => {\n            setUserRecipesState({\n                recipe: data.Recipes\n            })\n        })\n    }\n    return (\n        <Container>\n            <Row className=\"justify-content-md-center no-gutters\">\n                <Col md={3}>\n                    <Card className=\"profileCard\">\n                        <Card.Img\n                            className=\"ProfileImage\"\n                            variant=\"top\"\n                            src={props.profileImage}\n                        />\n                        <Card.Body>\n                            <Card.Text>\n                                <strong>Name:</strong> {props.name}\n                            </Card.Text>\n                            <Card.Text>\n                                <strong>Email:</strong> {props.email}\n                            </Card.Text>\n                            <Card.Text>\n                                <strong>Account Name:</strong> {props.accountName}\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col md={9}>\n                    <Card className=\"profileCard\">\n                        <Card.Body>\n                            <Card.Title>Recipes</Card.Title>\n                            <InputGroup className=\"mb-3\">\n                                <FormControl\n                                    type=\"search\"\n                                    placeholder=\"Search\"\n                                    onChange={handleSearchInput}\n                                    className=\"profileSearchBar\"\n                                />\n                            </InputGroup>\n                            <ListGroup variant=\"flush\">\n                                <Row lg={3} md={2} sm={2} xs={1} className=\"no-gutters\">\n                                    {userRecipesState.recipe !== \"\" ?\n                                        userRecipesState.recipe.map(item => (\n                                            <Link\n                                                className=\"RecipeListGroup\"\n                                                to={`/recipe/${item.id}/${item.recipeName}`}\n                                                id={item.id}\n                                            >\n                                                <strong>{item.recipeName}</strong>\n                                            </Link>\n\n                                        ))\n                                        : null}\n                                </Row>\n                            </ListGroup>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row >\n        </Container >\n    )\n}\n","C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\EditProfileForm\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\LogInModal\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\pages\\AddMoreIngrePage\\index.js",[],"C:\\Users\\JaeShin\\code\\personal\\ummas-cb\\ummacb\\src\\components\\AddIngreForm\\index.js",[],{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","severity":1,"message":"170","line":5,"column":10,"nodeType":"171","messageId":"172","endLine":5,"endColumn":14},{"ruleId":"169","severity":1,"message":"173","line":6,"column":10,"nodeType":"171","messageId":"172","endLine":6,"endColumn":21},{"ruleId":"169","severity":1,"message":"174","line":7,"column":10,"nodeType":"171","messageId":"172","endLine":7,"endColumn":16},{"ruleId":"169","severity":1,"message":"175","line":1,"column":27,"nodeType":"171","messageId":"172","endLine":1,"endColumn":36},{"ruleId":"169","severity":1,"message":"176","line":11,"column":12,"nodeType":"171","messageId":"172","endLine":11,"endColumn":24},{"ruleId":"177","severity":1,"message":"178","line":36,"column":8,"nodeType":"179","endLine":36,"endColumn":10,"suggestions":"180"},{"ruleId":"181","severity":1,"message":"182","line":80,"column":22,"nodeType":"183","messageId":"184","endLine":80,"endColumn":24},{"ruleId":"181","severity":1,"message":"182","line":74,"column":104,"nodeType":"183","messageId":"184","endLine":74,"endColumn":106},{"ruleId":"169","severity":1,"message":"185","line":9,"column":10,"nodeType":"171","messageId":"172","endLine":9,"endColumn":25},{"ruleId":"169","severity":1,"message":"186","line":10,"column":10,"nodeType":"171","messageId":"172","endLine":10,"endColumn":18},{"ruleId":"177","severity":1,"message":"187","line":29,"column":8,"nodeType":"179","endLine":29,"endColumn":10,"suggestions":"188"},{"ruleId":"181","severity":1,"message":"189","line":76,"column":50,"nodeType":"183","messageId":"184","endLine":76,"endColumn":52},{"ruleId":"181","severity":1,"message":"189","line":86,"column":50,"nodeType":"183","messageId":"184","endLine":86,"endColumn":52},{"ruleId":"181","severity":1,"message":"189","line":96,"column":50,"nodeType":"183","messageId":"184","endLine":96,"endColumn":52},{"ruleId":"181","severity":1,"message":"189","line":114,"column":66,"nodeType":"183","messageId":"184","endLine":114,"endColumn":68},{"ruleId":"181","severity":1,"message":"189","line":128,"column":67,"nodeType":"183","messageId":"184","endLine":128,"endColumn":69},{"ruleId":"177","severity":1,"message":"190","line":18,"column":8,"nodeType":"179","endLine":18,"endColumn":10,"suggestions":"191"},{"ruleId":"177","severity":1,"message":"192","line":25,"column":8,"nodeType":"179","endLine":25,"endColumn":10,"suggestions":"193"},{"ruleId":"177","severity":1,"message":"194","line":26,"column":8,"nodeType":"179","endLine":26,"endColumn":10,"suggestions":"195"},"no-native-reassign",["196"],"no-negated-in-lhs",["197"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'FormControl' is defined but never used.","'Button' is defined but never used.","'useEffect' is defined but never used.","'profileState' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchData', 'fetchIngreData', and 'fetchSavedRecipes'. Either include them or remove the dependency array.","ArrayExpression",["198"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'FontAwesomeIcon' is defined but never used.","'faSearch' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchRecipeData'. Either include it or remove the dependency array.",["199"],"Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'fetchUserData'. Either include it or remove the dependency array.",["200"],"React Hook useEffect has a missing dependency: 'fetchDinnerRecipeInfo'. Either include it or remove the dependency array.",["201"],"React Hook useEffect has a missing dependency: 'fetchRecipeInfo'. Either include it or remove the dependency array.",["202"],"no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},"Update the dependencies array to be: [fetchData, fetchIngreData, fetchSavedRecipes]",{"range":"213","text":"214"},"Update the dependencies array to be: [fetchRecipeData]",{"range":"215","text":"216"},"Update the dependencies array to be: [fetchUserData]",{"range":"217","text":"218"},"Update the dependencies array to be: [fetchDinnerRecipeInfo]",{"range":"219","text":"220"},"Update the dependencies array to be: [fetchRecipeInfo]",{"range":"221","text":"222"},[995,997],"[fetchData, fetchIngreData, fetchSavedRecipes]",[827,829],"[fetchRecipeData]",[482,484],"[fetchUserData]",[750,752],"[fetchDinnerRecipeInfo]",[784,786],"[fetchRecipeInfo]"]